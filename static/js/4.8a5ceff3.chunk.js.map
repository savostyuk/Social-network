{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","assets/images/image.JPG","assets/images/like.png","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","value","onBlur","updateStatus","onChange","e","currentTarget","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","styles","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","buttonProfile","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","onClick","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","mainPhoto","src","photos","large","userPhoto","target","files","length","initialValues","formData","then","Post","item","photo","photoProfile","post","message","likeCount","likesCounts","like","maxLength100","maxLengthCreator","MyPosts","React","memo","postsElements","posts","v","likesCount","id","postsBlock","AddPostFormRedux","values","addPost","newPostText","Field","component","name","placeholder","validate","required","button","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","getUserProfileTC","getStatusTC","updateStatusTC","savePhotoTC","saveProfileTC","withRouter"],"mappings":"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","file":"static/js/4.8a5ceff3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1QyLr\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3ADEA\",\"contact\":\"ProfileInfo_contact__2Zgu1\",\"buttonProfile\":\"ProfileInfo_buttonProfile__3FB_Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3bmJn\",\"postsBlock\":\"MyPosts_postsBlock__3n6kt\",\"button\":\"MyPosts_button__1bXCT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1HScw\",\"photo\":\"Post_photo__3cwFq\",\"likeCount\":\"Post_likeCount__SBCsG\",\"like\":\"Post_like__Ol3N3\",\"post\":\"Post_post__1235Q\"};","import React, {useEffect, useState} from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () =>{\r\n        setStatus(props.status);\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n            <div>\r\n                <strong>Статус:</strong> <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true}\r\n                       value={status}\r\n                       onBlur={deactivateEditMode}\r\n                       onChange={onStatusChange}\r\n                />\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport {createField, Input, Textarea} from \"../../common/FormControls/FormsControl\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport s from './ProfileInfo.module.css';\r\nimport styles from '../../common/FormControls/FormsControl.module.css'\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        {error && <div className={styles.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <strong>ФИО: </strong> {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <strong>Ищу работу: </strong>{createField(\"\", \"lookingForAJob\", [], Input, {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <strong>Мои профессиональные навыки: </strong>\r\n            {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <strong>Обо мне: </strong>\r\n            {createField(\"About me\", \"aboutMe\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <strong>Контакты: </strong> {Object.keys(profile.contacts).map(key => {\r\n\r\n            return <div key={key} className={s.contact}>\r\n                <strong>{key}: {createField(key, \"contacts.\"+key, [], Input)}</strong>\r\n            </div>\r\n\r\n        })}\r\n        </div>\r\n        <div>\r\n            <button className={s.buttonProfile}>Сохранить</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataFormReduxForm;\r\n","import React, {useState} from 'react';\r\nimport styles from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit =  (formData) =>{\r\n         saveProfile(formData)\r\n             .then (()=>{\r\n                 setEditMode(false);\r\n             })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.descriptionBlock}>\r\n                <img className={styles.mainPhoto} src={profile.photos.large || userPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                {editMode ?\r\n                    <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={()=>{setEditMode(true)}}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        <div>\r\n            <strong>ФИО: </strong> {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <strong>Ищу работу: </strong> {profile.lookingForAJob ? \"да\" : \"нет\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <strong>Мои профессиональные навыки: </strong> {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <strong>Обо мне: </strong> {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <strong>Контакты: </strong> {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n\r\n        {isOwner && <div><button className={styles.buttonProfile} onClick={goToEditMode}>Редактировать</button></div>}\r\n\r\n    </div>\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={styles.contact}>\r\n        <strong>{contactTitle}</strong>: {contactValue}\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n","export default __webpack_public_path__ + \"static/media/image.9a6eb26d.JPG\";","export default __webpack_public_path__ + \"static/media/like.0f239ab9.png\";","import React from 'react';\r\nimport photoProfile from '../../../../assets/images/image.JPG';\r\nimport like from '../../../../assets/images/like.png';\r\nimport styles from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <img className={styles.photo} src={photoProfile}/>\r\n            <div className={styles.post}>\r\n                {props.message}\r\n                <div className={styles.likeCount}>{props.likesCounts}<img className={styles.like} src={like}/></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n","import React from 'react';\r\nimport styles from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormsControl\";\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n\r\n    let postsElements = props.posts.map(v => <Post key={v.id} message={v.message} likesCounts={v.likesCount}/>);\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={styles.postsBlock}>\r\n            <h3>Моя стена</h3>\r\n            <AddPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={styles.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newPostText\"} placeholder=\"Новый пост\"\r\n                       validate={[required, maxLength100]}/>\r\n            </div>\r\n            <div>\r\n                <button className={styles.button}>Добавить пост</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm({form: \"profileAddNewPostForm\"})(AddNewPostForm)\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport {addPostAC} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) =>{\r\n            dispatch(addPostAC(newPostText));\r\n        },\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         isOwner={props.isOwner}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusTC, getUserProfileTC, savePhotoTC, saveProfileTC, updateStatusTC} from \"../../redux/profileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        /*        console.log('Profile render');*/\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}/>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    /*    console.log('mapStateToProps render PROFILE');*/\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileTC, getStatus: getStatusTC, updateStatus: updateStatusTC, savePhoto: savePhotoTC, saveProfile: saveProfileTC\r\n    }),\r\n    withRouter,\r\n    /*    WithAuthRedirect*/\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}